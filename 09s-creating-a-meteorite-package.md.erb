---
title: 创建一个meteor包
slug: creating-a-meteor-package
date: 0009/01/02
number: 9.5
points: 10
sidebar: true
photoUrl: http://www.flickr.com/photos/rxb/7779426142/
photoAuthor: Richard
contents: 写一个应用里的内部包。|给你的包添加测试。|发布你的包到Atmosphere。
paragraphs: 22
---

我们在报告错误的工作中已经创建了可重复使用的模式。为是么不把它打包让Meteor社区的其他人都可使用？

为了开始，我们需要一个Meteor的开发者账号。你可以从【meteor.com】申请，很有可能当你注册这本书的时候已经得到了。你所需要做的的是找到你的用户名，这是在本章中经常要用到的。

在本章中我们使用名‘tmeasday'，当然你也可以换成你自己的。

首先我们需要创建一个结构来存放新的包。使用命令’meteor create --package tmeasday:errors‘来完成。需要注意的是Meteor已经创建了一个名为’packages/tmeasday:errors/‘的文件夹和一些文件。我们开始编辑’package.js‘，在这文件中告诉Meteor这样使用这个包，有什么对象或函数要导出。

~~~js
Package.describe({
  name: "tmeasday:errors",
  summary: "A pattern to display application errors to the user",
  version: "1.0.0"
});

Package.onUse(function (api, where) {
  api.versionsFrom('0.9.0');
  
  api.use(['minimongo', 'mongo-livedata', 'templating'], 'client');

  api.addFiles(['errors.js', 'errors_list.html', 'errors_list.js'], 'client');
  
  if (api.export) 
    api.export('Errors');
});
~~~
<%= caption "packages/tmeasday:errors/package.js" %>

~~~html
<template name="meteorErrors">
  <div class="errors">
    {{#each errors}}
      {{> meteorError}}
    {{/each}}
  </div>
</template>

<template name="meteorError">
  <div class="alert alert-danger" role="alert">
    <button type="button" class="close" data-dismiss="alert">&times;</button>
    {{message}}
  </div>
</template>
~~~
<%= caption "packages/tmeasday:errors/errors_list.html" %>

~~~js
Template.meteorErrors.helpers({
  errors: function() {
    return Errors.collection.find();
  }
});

Template.meteorError.rendered = function() {
  var error = this.data;
  Meteor.setTimeout(function () {
    Errors.collection.remove(error._id);
  }, 3000);
};
~~~
<%= caption "packages/tmeasday:errors/errors_list.js" %>

### 在Microscope中测试新的包

现在我们需要对Microscope做本地测试，以确保代码工作正确。为了链接包到项目，我们用命令’meteor add tmeasday:errors‘，同时需要删除已经变得多余的现有文件：

~~~bash
rm client/helpers/errors.js
rm client/templates/includes/errors.html
rm client/templates/includes/errors.js
~~~
<%= caption "removing old files on the bash console" %>

我们需要做的另一件事情是做一些小的更新，使用正确的API：

~~~html
  {{> header}}
  {{> meteorErrors}}
~~~
<%= caption "client/templates/application/layout.html" %>

~~~js
Meteor.call('postInsert', post, function(error, id) {
  if (error) {
    // display the error to the user
    Errors.throw(error.reason);

~~~
<%= caption "client/templates/posts/post_submit.js" %>

~~~js
Posts.update(currentPostId, {$set: postProperties}, function(error) {
  if (error) {
    // display the error to the user
    Errors.throw(error.reason);
~~~
<%= caption "client/templates/posts/post_edit.js" %>

<%= scommit "9-5-1", "Created basic errors package and linked it in." %>

一旦这些修改完成，我们就可恢复原来分包前的行为了。

### 写测试

开发包的第一个步骤是在一个应用程序中测试它，但接下来就是写一个测试套件，正确的测试包的行为。Meteor本身自带Tinytest（内置的包测试仪），它可以很容易地运行测试套件，以便与他人分享包时确保正确。

让我们创建一个测试套件，使用Tinytest运行,对新的包进行测试：

~~~js
Tinytest.add("Errors - collection", function(test) {
  test.equal(Errors.collection.find({}).count(), 0);
  
  Errors.throw('A new error!');
  test.equal(Errors.collection.find({}).count(), 1);
  
  Errors.collection.remove({});
});

Tinytest.addAsync("Errors - template", function(test, done) {  
  Errors.throw('A new error!');
  test.equal(Errors.collection.find({}).count(), 1);
  
  // render the template
  UI.insert(UI.render(Template.meteorErrors), document.body);
  
  Meteor.setTimeout(function() {
    test.equal(Errors.collection.find({}).count(), 0);
    done();
  }, 3500);
});
~~~
<%= caption "packages/tmeasday:errors/errors_tests.js" %>

在这些测试中，我们检查包’Meteor.Errors‘的基本功能，以及再次确认该模板中的‘渲染’代码仍在工作。

我们不会在这里写Meteor包测试的所有细节（而且API尚未最终确定，很有可能会有变化），但希望它是在一定程度上自我解释其工作原理。

使用下面的代码告诉Meteor如何在‘package.js’中定义测试：

~~~js
Package.onTest(function(api) {
  api.use('tmeasday:errors', 'client');
  api.use(['tinytest', 'test-helpers'], 'client');  
  
  api.addFiles('errors_tests.js', 'client');
});
~~~
<%= caption "packages/tmeasday:errors/package.js" %>

<%= scommit "9-5-2", "Added tests to the package." %>

然后我们就可以运行的测试：

~~~bash
meteor test-packages tmeasday:errors
~~~
<%= caption "Terminal" %>

<%= screenshot "s7-1", "Passing all tests" %>

### 发布包

现在我们要发布这个包，把它推送到Meteor的包服务器Atmopshere中，让全世界的人都可使用。

幸运的是这很容易。我们只是’cd‘到包的目录，运行命令‘meteor publish --create’：

~~~bash
cd packages/tmeasday:errors
meteor publish --create
~~~
<%= caption "Terminal" %>

包已经发布，我们可以从项目中删除它，然后直接从Atmopshere重新添加它：

~~~bash
rm -r packages/errors
meteor add tmeasday:errors
~~~
<%= caption "Terminal (run from the top level of the app)" %>

<%= scommit "9-5-4", "Removed package from development tree." %>

现在我们应该看到Meteor第一次下载了我们的包。很棒！

---
title: 发布与订阅
slug: publications-and-subscriptions
date: 0004/01/02
number: 4.5
sidebar: true
contents: 理解发布和阅读是如何工作的。| 学习 default Autopublish 的作用 | 更多的发布模式
paragraphs: 52
---

发布和订阅是Meteor的最基本最重要的概念之一，但是如果也是刚刚开始接触 Meteor 的话，也是有些难度的。

而且容易产生不少误解，比如认为 Meteor 是不安全的， 或者说 Meteor App 无法处理大量数据等等。

人们起初会感觉这些概念很迷惑很大程度上是因为 Meteor 像变魔法一样替你做了很多事儿。尽管这些魔法最终看起来很有效，但是它们掩盖了后台真正做的工作（好像魔术一样）。所以让我们剥去魔法的外衣来看看究竟发生了什么。

### 过去的日子

首先，让我们回顾一下2011年之前，当 Meteor 还没有诞生的时候的老日子。比如说我们要建立一个简单的 Rails app。当用户来我们的站点，客户端（举例说浏览器）向我们的服务器端的 app 发送请求。

App 的第一个任务就是搞清楚这个客户请求什么数据。这个可能是搜索结果的第12页，玛丽的用户信息，鲍勃的最新20条微博，等等等等。 你可以想想成为一个书店的伙计在书架之间帮你寻找你要的书。

当正确的数据被找到，这个 App 的下一个任务就是把数据转换成伟好看的，人类可读的 HTML 格式（对于 API 而言是 JSON 串）。

用书店来举例，那就相当于是把你刚买的书包好，然后装入一个漂亮的袋子。这就是注明的 MVC（模型-视图-控制器）模式中的视图部分。

最终，App 把 HTML 代码送到客户端。这个 App 的任务也就交差了。它可以去卖瓶啤酒然后等着下一个请求来。

### Meteor 的方式

让我们看看 Meteor 相对之下是多么的特别。正如我们看到的，Meteor 的关键性创新在于 Rails 程序只跑在 **服务器**上，而一个 Meteor App 还包括客户端的组件跑在**客户端**（浏览器）傻瓜。

<%= diagram "client-server", "Pushing a subset of the database to the client.", "pull-right" %>

这就相当于书店的伙计不仅仅在书店里帮你找书，还跟你回家，每天晚上读给你听 （这听起来怪怪的）。

这种架构可以让 Meteor 多更多很酷的事情，其中一件主要的就是 Metoer 成为 [数据库无处不在] ([database everywhere])(http://docs.meteor.com/#sevenprinciples)。简单说，Meteor 把你的数据拿出一部分子集*复制到客户端*。

这样后两个主要结果：第一，服务器不再发送 HTML 代码到客户端，而是发送*真实的生数据*，让客户端绝对如何处理[线传数据](http://docs.meteor.com/#sevenprinciples)。第二，你可以不必等待服务器传回数据，而是**立即访问**。[延迟补偿]([latency compensation](http://docs.meteor.com/#sevenprinciples))。

### Publishing

////

////

////

<%= diagram "collections-1", "All the posts contained in our database.", "pull-center" %>

////

////

<%= diagram "collections-2", "Excluding flagged posts.", "pull-center" %>

////

~~~js
// on the server
Meteor.publish('posts', function() {
  return Posts.find({flagged: false}); 
});
~~~

////

<% note do %>

### DDP

////

////

<% end %>

### Subscribing

////

////

////

<%= diagram "collections-3", "Subscribing to Bob's posts will mirror them on the client.", "pull-center" %>

////

~~~js
// on the server
Meteor.publish('posts', function(author) {
  return Posts.find({flagged: false, author: author});
});
~~~

////

~~~js
// on the client
Meteor.subscribe('posts', 'bob-smith');
~~~

////

### Finding

////

<%= diagram "collections-4", "Selecting a subset of documents on the client.", "pull-center" %>

////

~~~js
// on the client
Template.posts.helpers({
  posts: function(){
    return Posts.find(author: 'bob-smith', category: 'JavaScript');
  }
});
~~~

////

### Autopublish

////

////

<%= diagram "autopublish", "Autopublish", "pull-center"%>

////

////

////

### Publishing Full Collections

////

~~~js 
Meteor.publish('allPosts', function(){
  return Posts.find();
});
~~~

<%= diagram "fullcollection", "Publishing a full collection", "pull-center" %>

////

### Publishing Partial Collections

////

~~~js 
Meteor.publish('somePosts', function(){
  return Posts.find({'author':'Tom'});
});
~~~

<%= diagram "partialcollection", "Publishing a partial collection", "pull-center" %>

<% note do %>

### Behind The Scenes

////

////

////

////

- ////
- ////
- ////

////

<% end %>

### Publishing Partial Properties

////

////

~~~js
Meteor.publish('allPosts', function(){
  return Posts.find({}, {fields: {
    date: false
  }});
});
~~~

<%= diagram "partialproperties", "Publishing partial properties", "pull-center" %>

////

~~~js
Meteor.publish('allPosts', function(){
  return Posts.find({'author':'Tom'}, {fields: {
    date: false
  }});
});
~~~

### Summing Up

////

////

////

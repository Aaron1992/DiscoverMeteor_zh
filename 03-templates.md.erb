---
title: 模板
slug: templates
date: 0003/01/01
number: 3
points: 10
photoUrl: http://www.flickr.com/photos/73449134@N04/8194499092/
photoAuthor: Mike Lewinski
contents: 学习关于 Meteor 的模板语言： Handlebars 。 |创建三个模板。|学习 Meteor 如何处理控制。|通过静态数据建立一个基本原型。
paragraphs: 46
---

为了更容易地进入 Meteor 的开发，我们将采用从外向内的方法来搭建项目。换句话说，我们将首先建立一个 HTML/JavaScript 的外壳，然后把它放到我们的项目里，内部细节处理稍后再说。

这意味着在本章中，我们只关注 `/client` 目录里面的事情。

让我们先在 `/client` 目录创建一个 `main.html`  文件，并写入以下代码：

~~~html
<head>
  <title>Microscope</title>
</head>
<body>
  <div class="container">
    <header class="navbar">
      <div class="navbar-inner">
        <a class="brand" href="/">Microscope</a>
      </div>
    </header>
    <div id="main" class="row-fluid">
      {{> postsList}}
    </div>
  </div>
</body>
~~~
<%= caption "client/main.html" %>

这是我们主要的 App 模板。在上面看到很多熟悉的 HTML 标签，除了这个 `{{> postsList}}` 标签，它是 `postsList` 模板的插入点，等一下我们就会说到。现在，先让我们创建更多的模板吧。

### Meteor 模板

我们项目的核心是社会新闻网站，它是由一系列的帖子所组成的，而这正是我们要调用模板的原因。

我们先在 `/client` 里面创建一个 `/views` 目录。这里用来放我们所有的模板，这样可以保持项目结构的清晰整洁，接着在 `/views` 里面再创建 `/posts` 目录来存放与帖子相关的模板。

<% note do %>

### 查找文件

Meteor 的强大之处在于文件的查找。无论你把代码文件放在 `/client` 目录下的任何地方，Meteor 都可以找到它并且正确地进行编译。这意味着你永远都不需要手动编写 JavaScript 或 CSS 文件的调用路径。

这也意味着你可能会把所有的文件放在同一目录，甚至所有的代码放在同一个文件。但由于 Meteor 会把一切的代码都编译到一个压缩的文件里面，因此我们更偏向于把项目弄得井井有条，使用更整洁的文件结构，提高项目的可读性。

<% end %>

接下来我们开始创建第二个模板。在 `client/views/posts` 目录中，创建  `posts_list.html` :

~~~html
<template name="postsList">
  <div class="posts">
    {{#each posts}}
      {{> postItem}}
    {{/each}}
  </div>
</template>
~~~
<%= caption "client/views/posts/posts_list.html" %>

和 `post_item.html` ：

~~~html
<template name="postItem">
  <div class="post">
    <div class="post-content">
      <h3><a href="{{url}}">{{title}}</a><span>{{domain}}</span></h3>
    </div>
  </div>
</template>
~~~
<%= caption "client/views/posts/post_item.html" %>

注意模板的 `name="postsList"` 属性，它的作用是告诉 Meteor 去根据这个名称来跟踪这个模板的位置。

接下来介绍 Meteor 的模板系统，[ Handlebars ](http://handlebarsjs.com)。 Handlebars 是一个简单的 HTML 模板，它包含三种语法： **Partials** ， **Expressions** 和 **Block Helpers** 。

**Partials** ：通过 `{{> templateName}}` 标记，简单直接地告诉 Meteor 这部分需要用相同名称的模板来取代（在我们的例子中就是 `postItem` ）。

**Expressions** ：比如 `{{title}}` 标记，它要么是调用当前对象的属性，要么就是对应到当前模板管理器中定义的 helper 方法，并返回其方法值（后面会详细讨论）。

**Block Helpers** ：在模板中控制流程的特殊标签，如 `{{#each}}…{{/each}}` 和 `{{#if}}…{{/if}}` 。

<% note do %>

### 进一步学习

如果你想了解更多关于 Handlebars 的内容，你可以参考[ Handlebars 的官方网站](http://handlebarsjs.com)或者 [ Handlebars 教程](http://javascriptissexy.com/handlebars-js-tutorial-learn-everything-about-handlebars-js-javascript-templating/)。

<% end %>

有了这些知识，我们就可以很容易去理解了。

首先，在 `postsList` 模板里，我们通过 `{{#each}}…{{/each}}` 的 Block Helpers 去遍历每一个帖子对象。然后，我们用 `postItem` 模板去包含每个迭代。

这个帖子对象来自哪里？它实际上是一个模板 helper，我们将会把它定义在模板管理器。

`postItem` 这个模板本身相当简单。它只使用三个标签： `{{url}}` 和 `{{title}}` 都返回其集合的属性，而 `{{domain}}` 则调用模板对应的 helper 方法。

我们所提到的“模板 helper ”，在本章中没有真正解释它所做的事情。但是，为了解释它，我们必须首先讨论管理器。

### 模板管理器

到目前为止我们已经学会了使用 Handlebars ，这只是在 HTML 的基础上多几个标签而已。不像其他语言如 PHP （甚至常规 HTML 页面，还包含了 JavaScript ）， Meteor 只是让模板和逻辑进行分离，而这些模板本身并不需要做很多复杂的事情。

为了让连接变得更流畅，一个模板需要一个**管理器**。你能想到的管理器就像在服务员（模板）把做成美味佳肴呈现给你之前，厨师总是需要准备原材料（数据）去处理。

换句话说，模板的作用是进行有限的显示或循环变量，而管理器则扮演着一个相当重要的角色：把值分配给每个变量。

<% note do %>

### 管理器?

当我们看到其他 Meteor 开发者去谈论模板管理器的时候，有些人说是“控制器”，有些人说是“放 JavaScript 代码的地方”。

管理器并不等于控制器（起码不是 MVC 中控制器的含义），而“ TFWIPMJSC ”并不是那么容易被记住，所以我们不再去争辩这两个命题了。

但我们仍然需要通过一个名称来谈论这个事情。所以我们提出了“管理器”作为简单直接的解释，而且跟其他 Web 框架中的概念没有任何的关系。

<% end %>

为简单起见，我们将采用与模板同名的方式来命名对应其模板的管理器，除了一些 **.js** 扩展文件例外。我们先在 `/client/views/posts` 目录下创建 `posts_list.js` 文件，马上开始构建第一个管理器：

~~~js
var postsData = [
  {
    title: 'Introducing Telescope',
    author: 'Sacha Greif',
    url: 'http://sachagreif.com/introducing-telescope/'
  }, 
  {
    title: 'Meteor',
    author: 'Tom Coleman',
    url: 'http://meteor.com'
  }, 
  {
    title: 'The Meteor Book',
    author: 'Tom Coleman',
    url: 'http://themeteorbook.com'
  }
];
Template.postsList.helpers({
  posts: postsData
});
~~~
<%= caption "client/views/posts/posts_list.js" %>

如果你运行是正确的，你现在应该在浏览器中看到这样的画面：

<%= screenshot "3-1", "我们的第一个带静态数据的模板" %>

<%= commit "3-1", "添加基本帖子列表模板和静态数据。" %>

我们刚刚在做两件事情。首先我们放置一些虚拟的基本数据到 `postsData` 数组中。原本数据应该是来自数据库的，但由于我们还没有学习到该怎么做（下一章揭晓），所以我们先通过使用静态数据来“作弊”。

然后，我们使用的是 Meteor 的 `Template.myTemplate.helpers()` 函数，在里面定义了 `posts` 的调用，并返回 `postsData` 数组。

定义 `posts` helper 意味着它现在可以被我们的模板来调用：

~~~html
<template name="postsList">
  <div class="posts">
    {{#each posts}}
      {{> postItem}}
    {{/each}}
  </div>
</template>
~~~
<%= caption "client/views/posts/posts_list.html" %>

这时候我们的模板就能够遍历 `postsData` 数组，并将里面的每个对象包含的属性发送到 `postItem` 模板中。

### "this" 的含义

我们现在创建一个 `post_item.js` 管理器：

~~~js
Template.postItem.helpers({
  domain: function() {
    var a = document.createElement('a');
    a.href = this.url;
    return a.hostname;
  }
});
~~~
<%= caption "client/views/posts/post_item.js" %>

<%= commit "3-2", "定义一个 `domain` helper 在 `postItem` 模板中。" %>

这一次我们 `domain` helper 的值不再是一个数组，而是一个匿名函数。相比起我们之前简化虚拟数据的例子，这种模式更为常见（而且更有用）。

<%= screenshot "3-2", "显示每个链接的域名。" %>

`domain` helper 方法通过 JavaScript 来获取 url 并返回其域名。但是它的 url 是怎么调用出来呢？

为了回答这个问题，我们需要回到我们的 `posts_list.html` 模板。 `{{#each}}` 模块不仅遍历我们数组，它还迭代这个块内每个对象的属性。

这意味着在 `{{#each}}` 标记之间，每个帖子都可以通过 `this` 依次访问，并且一直延伸到模板管理器中（ `post_item.js` ）。

我们现在明白了为什么 `this.url` 会返回当前帖子的 url 。而且，如果我们在 `post_item.html` 模板里面使用 `{{title}}` 和 `{{url}}` ， Meteor 就会知道需要去调用 `this.title` 和 `this.url` 去返回我们想要的正确值。

<% note do %>

### 神奇的 JavaScript

尽管这对于 Meteor 来说并不特别，这里会简单解释一下上面“ 神奇的 JavaScript 代码”。首先，我们创建一个空的锚（ `a` ）标签并储存在内存中。

然后我们将其 `href` 属性设置为当前帖子的 url （正如我们刚刚讲到的， `this` 在 help 中可以调用当前迭代的对象）。

最后，我们利用 `a` 标签的 `hostname` 属性来返回 url 中的域名。

<% end %>

如果你紧跟着我们的进度，这时候在浏览器中就会看到一个帖子列表。但这个列表只是调用了静态数据，它没有利用到 Meteor 实时性的特点。我们将在下一章向你展示该如何去修改！

<% note do %>

### 动态代码重载

你可能已经注意到，当你修改文件的时候，不需要手动刷新页面，浏览器就会自动重新加载。

这是因为 Meteor 跟踪了项目目录下的所有文件，当检测到其中一个文件发生改变，它就会自动刷新你的浏览器。

Meteor 的动态代码重载是相当智能的，它甚至可以在两个刷新动作之间保存你的 App 状态。

<% end %>
